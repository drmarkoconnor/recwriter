<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://drmarkoconnor.github.io/recwriter/feed.xml" rel="self" type="application/atom+xml" /><link href="https://drmarkoconnor.github.io/recwriter/" rel="alternate" type="text/html" /><updated>2021-01-16T22:23:03+00:00</updated><id>https://drmarkoconnor.github.io/recwriter/</id><title type="html">old rectory writers</title><subtitle>writing courses in the heart of north somerset - a perfect way to begin your writing journey</subtitle><entry><title type="html">There can be a much longer title set in the MyTitle KA</title><link href="https://drmarkoconnor.github.io/recwriter/Christmas" rel="alternate" type="text/html" title="There can be a much longer title set in the MyTitle KA" /><published>2020-12-25T20:11:50+00:00</published><updated>2020-12-25T20:11:50+00:00</updated><id>https://drmarkoconnor.github.io/recwriter/Christmas</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/Christmas">&lt;h1&gt;Heading one - typing this directly in Tinderbox&lt;/h1&gt;

&lt;h2&gt;Heading two - I have terminal open and running &lt;code&gt;bundle exec jekyll serve --livereload&lt;/code&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Visual Studio code shows files in folders based on git branch that is checked out&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;quote : I would like to find out if finder does this in some fashion as it is very cool&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="git" /><category term="tbx" /><category term="tinderbox" /><summary type="html">Heading one - typing this directly in Tinderbox</summary></entry><entry><title type="html">More Git</title><link href="https://drmarkoconnor.github.io/recwriter/more-git" rel="alternate" type="text/html" title="More Git" /><published>2020-12-04T20:12:21+00:00</published><updated>2020-12-04T20:12:21+00:00</updated><id>https://drmarkoconnor.github.io/recwriter/more-git</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/more-git">&lt;h1&gt;git: Merging commits from branches&lt;/h1&gt;

&lt;h2&gt;1. Fast-forward merge&lt;/h2&gt;

&lt;p&gt;
  This can only be done if there are no other commits to the base branch since
  the branching took place It is the deafult method that git adopts
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge featureX&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d featureX&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;2. Merge commit&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge featureX&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    there will be a message here to accept or not the merge B - a no
    fast-forward merge means that a merge commit will always be created if you
    want to force a merge commit use the following
    &lt;code&gt;git merge --no-ff featureX&lt;/code&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git branch -d featureX&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;3. Squash merge&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git merge --squash featureX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; a)accept or modify the squash message&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git branch -D featureX&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;4. Rebase&lt;/h2&gt;

&lt;p&gt;
  see
  &lt;a href=&quot;drafts5://open?uuid=E350B40F-DBFF-40DC-8C89-DC5A1D899195&quot;
    &gt;this file&lt;/a
  &gt;
&lt;/p&gt;

&lt;h1&gt;Resolving merge conflicts&lt;/h1&gt;

&lt;p&gt;
  Essentially any files with conflicts are placed into the working tree after
  being modified by git - a decision has to involve judgment and the files with
  modified content are marked up by git with &gt;&gt;&gt;&gt; and &amp;lt;&amp;lt;&amp;lt;&amp;lt; and can
  be edited, saved, added and them committed.
&lt;/p&gt;

&lt;p&gt;
  Again use &lt;code&gt;git log --oneline --graph --all&lt;/code&gt; to see the results and
  check all is good
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;checkout master&lt;/li&gt;
  &lt;li&gt;
    merge featureX
    &lt;ul&gt;
      &lt;li&gt;a. CONFLICT - both modified fileA.txt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fix fileA.txt&lt;/li&gt;
  &lt;li&gt;stage fileA.txt&lt;/li&gt;
  &lt;li&gt;commit the merge commit&lt;/li&gt;
  &lt;li&gt;delete the featureX branch label&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;resolving a merge conflict involves 3 commits&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;the tip of the current branch ( 'ours' or 'mine')&lt;/li&gt;
  &lt;li&gt;the tip of the branch to be merged ('theirs')&lt;/li&gt;
  &lt;li&gt;a common ancestor ( 'merge base')&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Aborting a merge attempt&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/p&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="git" /><summary type="html">git: Merging commits from branches</summary></entry><entry><title type="html">The Good Morrow</title><link href="https://drmarkoconnor.github.io/recwriter/the-good-morr" rel="alternate" type="text/html" title="The Good Morrow" /><published>2020-08-15T20:09:49+01:00</published><updated>2020-08-15T20:09:49+01:00</updated><id>https://drmarkoconnor.github.io/recwriter/the-good-morr</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/the-good-morr">&lt;h1&gt;The Good-Morrow&lt;/h1&gt;

&lt;h3&gt;by john donne&lt;/h3&gt;

&lt;p&gt;
  This doesn’t render nicely as the tbx note exports as html and not md (
  because author page insert doesn’t work if not ) So use Drafts app to convert
  text like this into html and use that in tbx which markup and quote html
  option checked
&lt;/p&gt;

&lt;h1&gt;I wonder, by my troth, what thou and I&lt;/h1&gt;

&lt;p&gt;
  Did, till we loved? Were we not weaned till then? But sucked on country
  pleasures, childishly? Or snorted we in the Seven Sleepers’ den? ’Twas so; but
  this, all pleasures fancies be. If ever any beauty I did see, Which I desired,
  and got, ’twas but a dream of thee.
&lt;/p&gt;

&lt;h1&gt;And now good-morrow to our waking souls,&lt;/h1&gt;

&lt;p&gt;
  Which watch not one another out of fear; For love, all love of other sights
  controls, And makes one little room an everywhere. Let sea-discoverers to new
  worlds have gone, Let maps to other, worlds on worlds have shown, Let us
  possess one world, each hath one, and is one.
&lt;/p&gt;

&lt;h1&gt;My face in thine eye, thine in mine appears,&lt;/h1&gt;

&lt;p&gt;
  And true plain hearts do in the faces rest; Where can we find two better
  hemispheres, Without sharp north, without declining west? Whatever dies, was
  not mixed equally; If our two loves be one, or, thou and I Love so alike, that
  none do slacken, none can die.
&lt;/p&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="poetry" /><summary type="html">The Good-Morrow</summary></entry><entry><title type="html">Setting post date with $MyDate</title><link href="https://drmarkoconnor.github.io/recwriter/setting-post" rel="alternate" type="text/html" title="Setting post date with $MyDate" /><published>2020-02-01T19:45:06+00:00</published><updated>2020-02-01T19:45:06+00:00</updated><id>https://drmarkoconnor.github.io/recwriter/setting-post-</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/setting-post">&lt;p&gt;The date variable is set in the MyDate KA and does not have to relate to the date in the post&lt;/p&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="post_formatting" /><summary type="html">The date variable is set in the MyDate KA and does not have to relate to the date in the post</summary></entry><entry><title type="html">Markup is converted to html by tiinderbox</title><link href="https://drmarkoconnor.github.io/recwriter/git-basics" rel="alternate" type="text/html" title="Markup is converted to html by tiinderbox" /><published>2020-01-08T20:12:28+00:00</published><updated>2020-01-08T20:12:28+00:00</updated><id>https://drmarkoconnor.github.io/recwriter/git-basics</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/git-basics">&lt;h1&gt;git: Basic git set up for new projects including making/deleting a branch&lt;/h1&gt;

&lt;h2&gt;git [command] [--flag] [arguments]&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inside moc/repos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir [name of your new project]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd [name of your new project]&lt;/code&gt; 
&lt;blockquote&gt;
  &lt;p&gt;( move to the new directory )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;
These are the basic steps to create a project that can be then version controlled by github.
git will confirm that a .git directory has been created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ls -la&lt;/code&gt;
will show the . .. .git structure now inside the new project&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
echo &amp;gt;fileA.txt
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;this CLI creates an empty txt file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add fileA.txt&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;this adds the file to the &lt;strong&gt;staging area&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit -m '_message_'&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;there are other -switches like -verbose&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;will list all the branches in the repos project and an asterisk indicates the current one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;two command approach&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch featureX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout featureX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;one command approach&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -b featureX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;use the log function with graph to check&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git log --oneline --graph&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout [name of branch]&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;this allows switching between branches&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;File changes on branches&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;change the contents of the file whilst in the new branch&lt;/li&gt;
&lt;li&gt;then change back to the master branch &lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;open file and you will see that the changes to the file are not present ( as they were made under the featureX branch of which the master branch has no knowledge )&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;use git log --oneline --graph --all&lt;/code&gt; to see all the commits attached to the branches in the repo&lt;/p&gt;

&lt;p&gt;featureX branch has a more recent commit. Check back into this branch now&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout featureX&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;add another change to the file and add it to stage and then commit it.
There are now two commits on the featureX branch
can use the &lt;code&gt;HEAD~&lt;/code&gt; tilde mark to checkout a previous commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git checkout HEAD~&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;this will raise a warning about a DETACHED HEAD state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;go back to master ( by &lt;code&gt;git checkout master&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say that you &lt;strong&gt;don't want to merge&lt;/strong&gt; any changes made on the new file ( merging coming later )  and want to delete the branch &lt;strong&gt;featureX&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch  -d featureX&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This however will only produce a warning becasue there are two commits that will be left dangling. If you want to keep them you could create a new branch for them.&lt;/p&gt;

&lt;p&gt;However the warning gives information about how you can delete with a -D option switch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ie &lt;code&gt;git branch  -D featureX&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;git log&lt;/code&gt; and &lt;code&gt;git status&lt;/code&gt; frequently to see where you are&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(If you are interested) Want to &quot;undo&quot; the deleting of the featureX branch?
Execute &lt;code&gt;git reflog&lt;/code&gt; . This shows the local history of HEAD references. Since Git doesn't immediately delete commits, you can find the SHA-1 of your most recent featureX branch there.&lt;/p&gt;

&lt;p&gt;Copy the SHA-1 of the &quot;add feature bigger mistake&quot; commit. Execute git checkout &lt;strong&gt;-b&lt;/strong&gt; &lt;code&gt;[this switch doesn't seem to work]??&lt;/code&gt; featureX [SHA-1 YOU COPIED] .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;git log&lt;/code&gt; and &lt;code&gt;git status&lt;/code&gt; frequently to see where you are&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="git" /><category term="tech" /><summary type="html">git: Basic git set up for new projects including making/deleting a branch</summary></entry><entry><title type="html">Set on 3/1/2020 to post on 4th January git Netowrk commands</title><link href="https://drmarkoconnor.github.io/recwriter/network-command" rel="alternate" type="text/html" title="Set on 3/1/2020 to post on 4th January git Netowrk commands" /><published>2020-01-03T20:10:46+00:00</published><updated>2020-01-03T20:10:46+00:00</updated><id>https://drmarkoconnor.github.io/recwriter/network-command</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/network-command">&lt;h1&gt;git: Network commands&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;fetch&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;retieves new objects and references from the remote repository&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;push&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;adds new objects an references to the remotes repository&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pull&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fetches and merges commits locally&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;clone&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;copies a remote repository ( if creating with github make sure it is not empty to ensure tracking branches are created automatically&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="git" /><category term="post_formatting" /><summary type="html">git: Network commands</summary></entry><entry><title type="html">How this website is built - for free!</title><link href="https://drmarkoconnor.github.io/recwriter/building-this-website" rel="alternate" type="text/html" title="How this website is built - for free!" /><published>2017-07-27T11:00:00+01:00</published><updated>2017-07-27T11:00:00+01:00</updated><id>https://drmarkoconnor.github.io/recwriter/building-this-website</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/building-this-website">&lt;h1 id=&quot;getting-jasper2-to-work-on-github-pages&quot;&gt;Getting jasper2 to work on github pages&lt;/h1&gt;

&lt;h2 id=&quot;nutshell&quot;&gt;nutshell&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Clone &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyller/jasper2&lt;/code&gt; to local repo &lt;code class=&quot;highlighter-rouge&quot;&gt;jasper2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change _config.yml&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; baseurl: /recwriter/
 url: https://drmarkoconnor.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;In github create repo subfolder &lt;code class=&quot;highlighter-rouge&quot;&gt;recwriter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In local &lt;code class=&quot;highlighter-rouge&quot;&gt;jasper2&lt;/code&gt; –&amp;gt; in terminal –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production bundle exec jekyll serve --livereload&lt;/code&gt; –&amp;gt; outputs to–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;jasper2-pages&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jasper2-pages&lt;/code&gt; –&amp;gt;is then git pushed –&amp;gt; github recwriters repo main branch ie –&amp;gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	git add *
	git commit -m 'suitable message reflected any changes'
	git push origin main

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;After 1 to 5 mins the site should be live on ; &lt;code class=&quot;highlighter-rouge&quot;&gt;drmarkoconnor.github.io/recwriters/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;produces Auto-regeneration: enabled for ‘/Users/moc/repos/jasper2’
Server address: http://127.0.0.1:4000/recwriter//
Server running… press ctrl-c to stop.&lt;/p&gt;

&lt;p&gt;If this looks like it is running ok inthe local environment then jasper2-pages ( the produced static site ) needs pushiing to github&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd NAMEofREPO&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git add *
 git commit -m 'updating produced site or other relevant change message'
 git push

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(prior to git push you may want to check you have the remote set up properly)
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push --set-upstream origin BRANCH NAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NB - not sure that a project subfolder needs a gh-pages branch any more ( Jan 2021 )&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/us-20.jpg#full&quot; alt=&quot;full width image with hash tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wait for github to build the site and then check on ;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[http://usernameGITHUB.IO/projectname/](#)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Careful that exclude area of _config.yml doesn’t include assets/css as site won’t render without the css. Not sure why jasper2 produces this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	**exclude:**
  - node_modules
  - vendor
  - .travis.yml
  - Gemfile
  - Gemfile.lock
  - GHOST.txt
  - gulpfile.js
  - LICENSE
  - package.json
  - package-lock.json
  - Rakefile
  - README.md
  - changelog.md
  - &quot;*.Rmd&quot;
  - .git*


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;_plugins&quot;&gt;_plugins&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-autogenerator.rb&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-capitalize-all.rb&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-tagsgenerator.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure these remain in jasper2 - they are not supporteed by github which is why local gneration produced jasper2-pages ( the static site with js etc…) which is git pushed to the main github.io or project repo&lt;/p&gt;

&lt;h1 id=&quot;todo&quot;&gt;todo&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;create dev branch in local and remote and see if can switch using github settings to display live - if dev is good merge onto main for new live&lt;/li&gt;
  &lt;li&gt;tbx site to upload&lt;/li&gt;
  &lt;li&gt;collect images relevant to writing&lt;/li&gt;
  &lt;li&gt;add in fotolio images&lt;/li&gt;
  &lt;li&gt;add in html5 bootstrap page to check works&lt;/li&gt;
  &lt;li&gt;write short summary blog on how to update ( ie edit this file ) including the two youtube entries as insets&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;expand-to-include-blog-re-tinderbox-with-links-etc&quot;&gt;Expand to include blog re tinderbox with links etc…&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Dr Mark O'Connor</name></author><category term="tech" /><summary type="html">Getting jasper2 to work on github pages</summary></entry><entry><title type="html">Welcome to Ghost</title><link href="https://drmarkoconnor.github.io/recwriter/welcome" rel="alternate" type="text/html" title="Welcome to Ghost" /><published>2017-07-27T11:00:00+01:00</published><updated>2017-07-27T11:00:00+01:00</updated><id>https://drmarkoconnor.github.io/recwriter/welcome</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/welcome">&lt;p&gt;Hey! Welcome to Ghost, it’s great to have you :)&lt;/p&gt;

&lt;p&gt;We know that first impressions are important, so we’ve populated your new site with some initial &lt;strong&gt;Getting Started&lt;/strong&gt; posts that will help you get familiar with everything in no time. This is the first one!&lt;/p&gt;

&lt;h3 id=&quot;there-are-a-few-things-that-you-should-know-up-front&quot;&gt;There are a few things that you should know up-front:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That’s who it works best for. If you’re using Ghost for some other purpose, that’s fine too - but it might not be the best choice for you.&lt;/li&gt;
  &lt;li&gt;The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so &lt;strong&gt;does&lt;/strong&gt; require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.&lt;/li&gt;
  &lt;li&gt;For the best experience we recommend downloading the Ghost Desktop App for your computer, which is the best way to access your Ghost site on a desktop device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our &lt;a href=&quot;https://ghost.org/pricing&quot;&gt;Ghost(Pro)&lt;/a&gt; service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.&lt;/p&gt;

&lt;p&gt;The main thing you’ll want to read about next is probably: &lt;a href=&quot;https://demo.ghost.io/the-editor/&quot;&gt;the Ghost editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’re done reading, you can simply delete the default &lt;strong&gt;Ghost&lt;/strong&gt; user from your team to remove all of these introductory posts!&lt;/p&gt;</content><author><name>ghost</name></author><category term="Getting started" /><summary type="html">Hey! Welcome to Ghost, it’s great to have you :)</summary></entry><entry><title type="html">Using the Ghost editor</title><link href="https://drmarkoconnor.github.io/recwriter/the-editor" rel="alternate" type="text/html" title="Using the Ghost editor" /><published>2017-07-27T10:00:00+01:00</published><updated>2017-07-27T10:00:00+01:00</updated><id>https://drmarkoconnor.github.io/recwriter/the-editor</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/the-editor">&lt;p&gt;Ghost uses a language called &lt;strong&gt;Markdown&lt;/strong&gt; to format text.&lt;/p&gt;
&lt;p&gt;When you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.&lt;/p&gt;
&lt;p&gt;At the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a &lt;strong&gt;?&lt;/strong&gt; icon, which contains more advanced shortcuts.&lt;/p&gt;
&lt;p&gt;For now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.&lt;/p&gt;
&lt;h2 id=&quot;formattingtext&quot;&gt;Formatting text&lt;/h2&gt;
&lt;p&gt;The most common shortcuts are of course, &lt;strong&gt;bold&lt;/strong&gt; text, &lt;em&gt;italic&lt;/em&gt; text, and &lt;a href=&quot;https://example.com&quot;&gt;hyperlinks&lt;/a&gt;. These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMD/Ctrl + B&lt;/code&gt; for Bold&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD/Ctrl + I&lt;/code&gt; for Italic&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD/Ctrl + K&lt;/code&gt; for a Link&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD/Ctrl + H&lt;/code&gt; for a Heading (Press multiple times for h2/h3/h4/etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.&lt;/p&gt;
&lt;h2 id=&quot;insertingimages&quot;&gt;Inserting images&lt;/h2&gt;
&lt;p&gt;Images in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![Image description](/path/to/image.jpg)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://casper.ghost.org/v1.0.0/images/computer.jpg&quot; alt=&quot;Computer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files &lt;strong&gt;before&lt;/strong&gt; uploading them to Ghost.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;makinglists&quot;&gt;Making lists&lt;/h2&gt;
&lt;p&gt;Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. Like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crack the eggs over a bowl&lt;/li&gt;
&lt;li&gt;Whisk them together&lt;/li&gt;
&lt;li&gt;Make an omellete&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember to buy milk&lt;/li&gt;
&lt;li&gt;Feed the cat&lt;/li&gt;
&lt;li&gt;Come up with idea for next story&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;addingquotes&quot;&gt;Adding quotes&lt;/h2&gt;
&lt;p&gt;When you want to pull out a particularly good except in the middle of a piece, you can use &lt;code&gt;&amp;gt;&lt;/code&gt; at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A well placed quote guides a reader through a story, helping them to understand the most important points being made&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.&lt;/p&gt;
&lt;h2 id=&quot;dividingthingsup&quot;&gt;Dividing things up&lt;/h2&gt;
&lt;p&gt;If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping &lt;code&gt;---&lt;/code&gt; on a new line will create a sleak divider, anywhere you want it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the &lt;a href=&quot;/advanced-markdown/&quot;&gt;Advanced Markdown Guide&lt;/a&gt; - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of &lt;a href=&quot;/using-tags/&quot;&gt;how to use Ghost tags&lt;/a&gt;.&lt;/p&gt;</content><author><name>ghost</name></author><category term="Getting started" /><summary type="html">Ghost uses a language called Markdown to format text. When you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause. At the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a ? icon, which contains more advanced shortcuts. For now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used. Formatting text The most common shortcuts are of course, bold text, italic text, and hyperlinks. These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts. CMD/Ctrl + B for Bold CMD/Ctrl + I for Italic CMD/Ctrl + K for a Link CMD/Ctrl + H for a Heading (Press multiple times for h2/h3/h4/etc) With just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story. Inserting images Images in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this: ![Image description](/path/to/image.jpg) Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown. Important Note: Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files before uploading them to Ghost. Making lists Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use * or - or +. Like this: Crack the eggs over a bowl Whisk them together Make an omellete or Remember to buy milk Feed the cat Come up with idea for next story Adding quotes When you want to pull out a particularly good except in the middle of a piece, you can use &amp;gt; at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients. A well placed quote guides a reader through a story, helping them to understand the most important points being made All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly. Dividing things up If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping --- on a new line will create a sleak divider, anywhere you want it. This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the Advanced Markdown Guide - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of how to use Ghost tags.</summary></entry><entry><title type="html">Organising your content with tags</title><link href="https://drmarkoconnor.github.io/recwriter/using-tags" rel="alternate" type="text/html" title="Organising your content with tags" /><published>2017-07-27T09:00:00+01:00</published><updated>2017-07-27T09:00:00+01:00</updated><id>https://drmarkoconnor.github.io/recwriter/using-tags</id><content type="html" xml:base="https://drmarkoconnor.github.io/recwriter/using-tags">&lt;p&gt;Ghost has a single, powerful organisational taxonomy, called tags.&lt;/p&gt;
&lt;p&gt;It doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.&lt;/p&gt;
&lt;h2 id=&quot;basictagging&quot;&gt;Basic tagging&lt;/h2&gt;
&lt;p&gt;When you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with &lt;code&gt;News&lt;/code&gt; and other posts with &lt;code&gt;Cycling&lt;/code&gt;, which would create two distinct categories of content listed on &lt;code&gt;/tag/news/&lt;/code&gt; and &lt;code&gt;/tag/cycling/&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;If you tag a post with both &lt;code&gt;News&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;Cycling&lt;/code&gt; - then it appears in both sections.&lt;/p&gt;
&lt;p&gt;Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.&lt;/p&gt;
&lt;h2 id=&quot;theprimarytag&quot;&gt;The primary tag&lt;/h2&gt;
&lt;p&gt;Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;News&lt;/strong&gt;, Cycling, Bart Stevens, Extreme Sports&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;In this example, &lt;strong&gt;News&lt;/strong&gt; is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.&lt;/p&gt;
&lt;h2 id=&quot;privatetags&quot;&gt;Private tags&lt;/h2&gt;
&lt;p&gt;Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.&lt;/p&gt;
&lt;p&gt;For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;News&lt;/strong&gt;, Cycling, #video&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;Here, the theme would assign the post publicly displayed tags of &lt;code&gt;News&lt;/code&gt;, and &lt;code&gt;Cycling&lt;/code&gt; - but it would also keep a private record of the post being tagged with &lt;code&gt;#video&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In your theme, you could then look for private tags conditionally and give them special formatting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;{{#post}}
    {{#has tag=&amp;quot;#video&amp;quot;}}
        ...markup for a nice big video post layout...
    {{else}}
        ...regular markup for a post...
    {{/has}}
{{/post}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find documentation for theme development techniques like this and many more over on Ghost's extensive &lt;a href=&quot;https://themes.ghost.org/&quot;&gt;theme documentation&lt;/a&gt;.&lt;/p&gt;</content><author><name>ghost</name></author><category term="Getting started" /><summary type="html">Ghost has a single, powerful organisational taxonomy, called tags. It doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content. Basic tagging When you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with News and other posts with Cycling, which would create two distinct categories of content listed on /tag/news/ and /tag/cycling/, respectively. If you tag a post with both News and Cycling - then it appears in both sections. Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data. The primary tag Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important. News, Cycling, Bart Stevens, Extreme Sports In this example, News is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives. Private tags Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling. For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do. News, Cycling, #video Here, the theme would assign the post publicly displayed tags of News, and Cycling - but it would also keep a private record of the post being tagged with #video. In your theme, you could then look for private tags conditionally and give them special formatting: {{#post}} {{#has tag=&amp;quot;#video&amp;quot;}} ...markup for a nice big video post layout... {{else}} ...regular markup for a post... {{/has}} {{/post}} You can find documentation for theme development techniques like this and many more over on Ghost's extensive theme documentation.</summary></entry></feed>